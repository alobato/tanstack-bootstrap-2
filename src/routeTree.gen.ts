/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CustomersImport } from './routes/customers'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as PathlessLayoutNestedLayoutImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as authSignInImport } from './routes/(auth)/sign-in'
import { Route as AuthenticatedProtectedRouteImport } from './routes/_authenticated/protected.route'
import { Route as AuthenticatedProtectedIndexImport } from './routes/_authenticated/protected.index'
import { Route as PathlessLayoutNestedLayoutRouteBImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteAImport } from './routes/_pathlessLayout/_nested-layout/route-a'

// Create/Update Routes

const CustomersRoute = CustomersImport.update({
  id: '/customers',
  path: '/customers',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutNestedLayoutRoute = PathlessLayoutNestedLayoutImport.update(
  {
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any,
)

const authSignInRoute = authSignInImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedProtectedRouteRoute =
  AuthenticatedProtectedRouteImport.update({
    id: '/protected',
    path: '/protected',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedProtectedIndexRoute =
  AuthenticatedProtectedIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedProtectedRouteRoute,
  } as any)

const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteAImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/customers': {
      id: '/customers'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/protected': {
      id: '/_authenticated/protected'
      path: '/protected'
      fullPath: '/protected'
      preLoaderRoute: typeof AuthenticatedProtectedRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteAImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/_authenticated/protected/': {
      id: '/_authenticated/protected/'
      path: '/'
      fullPath: '/protected/'
      preLoaderRoute: typeof AuthenticatedProtectedIndexImport
      parentRoute: typeof AuthenticatedProtectedRouteImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedProtectedRouteRouteChildren {
  AuthenticatedProtectedIndexRoute: typeof AuthenticatedProtectedIndexRoute
}

const AuthenticatedProtectedRouteRouteChildren: AuthenticatedProtectedRouteRouteChildren =
  {
    AuthenticatedProtectedIndexRoute: AuthenticatedProtectedIndexRoute,
  }

const AuthenticatedProtectedRouteRouteWithChildren =
  AuthenticatedProtectedRouteRoute._addFileChildren(
    AuthenticatedProtectedRouteRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedProtectedRouteRoute: typeof AuthenticatedProtectedRouteRouteWithChildren
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedProtectedRouteRoute:
    AuthenticatedProtectedRouteRouteWithChildren,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/customers': typeof CustomersRoute
  '/protected': typeof AuthenticatedProtectedRouteRouteWithChildren
  '/sign-in': typeof authSignInRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/protected/': typeof AuthenticatedProtectedIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/customers': typeof CustomersRoute
  '/sign-in': typeof authSignInRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/protected': typeof AuthenticatedProtectedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/customers': typeof CustomersRoute
  '/_authenticated/protected': typeof AuthenticatedProtectedRouteRouteWithChildren
  '/(auth)/sign-in': typeof authSignInRoute
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/_authenticated/protected/': typeof AuthenticatedProtectedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/customers'
    | '/protected'
    | '/sign-in'
    | '/route-a'
    | '/route-b'
    | '/protected/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/customers'
    | '/sign-in'
    | '/route-a'
    | '/route-b'
    | '/protected'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_pathlessLayout'
    | '/customers'
    | '/_authenticated/protected'
    | '/(auth)/sign-in'
    | '/_pathlessLayout/_nested-layout'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/_authenticated/protected/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  CustomersRoute: typeof CustomersRoute
  authSignInRoute: typeof authSignInRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  CustomersRoute: CustomersRoute,
  authSignInRoute: authSignInRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/_pathlessLayout",
        "/customers",
        "/(auth)/sign-in"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/protected"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx",
      "children": [
        "/_pathlessLayout/_nested-layout"
      ]
    },
    "/customers": {
      "filePath": "customers.tsx"
    },
    "/_authenticated/protected": {
      "filePath": "_authenticated/protected.route.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/protected/"
      ]
    },
    "/(auth)/sign-in": {
      "filePath": "(auth)/sign-in.tsx"
    },
    "/_pathlessLayout/_nested-layout": {
      "filePath": "_pathlessLayout/_nested-layout.tsx",
      "parent": "/_pathlessLayout",
      "children": [
        "/_pathlessLayout/_nested-layout/route-a",
        "/_pathlessLayout/_nested-layout/route-b"
      ]
    },
    "/_pathlessLayout/_nested-layout/route-a": {
      "filePath": "_pathlessLayout/_nested-layout/route-a.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_pathlessLayout/_nested-layout/route-b": {
      "filePath": "_pathlessLayout/_nested-layout/route-b.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_authenticated/protected/": {
      "filePath": "_authenticated/protected.index.tsx",
      "parent": "/_authenticated/protected"
    }
  }
}
ROUTE_MANIFEST_END */
